<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.broker.dao.BrokerAccountDao">
  <resultMap id="BaseResultMap" type="com.broker.domain.BrokerAccount">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="broker_user" jdbcType="INTEGER" property="brokerUser" />
    <result column="bank_no" jdbcType="VARCHAR" property="bankNo" />
    <result column="bank_name" jdbcType="VARCHAR" property="bankName" />
    <result column="bank_branch" jdbcType="VARCHAR" property="bankBranch" />
    <result column="account_balance" jdbcType="DECIMAL" property="accountBalance" />
    <result column="freeze_balance" jdbcType="DECIMAL" property="freezeBalance" />
  </resultMap>
  <sql id="Base_Column_List">
    uid, broker_user, bank_no, bank_name, bank_branch, account_balance, freeze_balance
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from broker_account
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from broker_account
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.broker.domain.BrokerAccount">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_account (broker_user, bank_no,
      bank_name, bank_branch, account_balance, 
      freeze_balance)
    values (#{brokerUser,jdbcType=INTEGER}, #{bankNo,jdbcType=VARCHAR},
      #{bankName,jdbcType=VARCHAR}, #{bankBranch,jdbcType=VARCHAR}, #{accountBalance,jdbcType=DECIMAL}, 
      #{freezeBalance,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.broker.domain.BrokerAccount">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_account
    <trim prefix="(" suffix=")" suffixOverrides=",">
      uid,
      <if test="brokerUser != null">
        broker_user,
      </if>
      <if test="bankNo != null">
        bank_no,
      </if>
      <if test="bankName != null">
        bank_name,
      </if>
      <if test="bankBranch != null">
        bank_branch,
      </if>
      <if test="accountBalance != null">
        account_balance,
      </if>
      <if test="freezeBalance != null">
        freeze_balance,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{uid,jdbcType=INTEGER},
      <if test="brokerUser != null">
        #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="bankNo != null">
        #{bankNo,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankBranch != null">
        #{bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="accountBalance != null">
        #{accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="freezeBalance != null">
        #{freezeBalance,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.broker.domain.BrokerAccount">
    update broker_account
    <set>
      <if test="brokerUser != null">
        broker_user = #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="bankNo != null">
        bank_no = #{bankNo,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        bank_name = #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankBranch != null">
        bank_branch = #{bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="accountBalance != null">
        account_balance = #{accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="freezeBalance != null">
        freeze_balance = #{freezeBalance,jdbcType=DECIMAL},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.broker.domain.BrokerAccount">
    update broker_account
    set broker_user = #{brokerUser,jdbcType=INTEGER},
      bank_no = #{bankNo,jdbcType=VARCHAR},
      bank_name = #{bankName,jdbcType=VARCHAR},
      bank_branch = #{bankBranch,jdbcType=VARCHAR},
      account_balance = #{accountBalance,jdbcType=DECIMAL},
      freeze_balance = #{freezeBalance,jdbcType=DECIMAL}
    where uid = #{uid,jdbcType=INTEGER}
  </update>

  <select id="getBrokerAccountByUserId" parameterType="java.lang.Integer" resultType="com.broker.domain.BrokerAccount">
    SELECT
    <include refid="Base_Column_List"></include>
    FROM broker_account ba
    WHERE ba.broker_user = #{0}
  </select>
</mapper>