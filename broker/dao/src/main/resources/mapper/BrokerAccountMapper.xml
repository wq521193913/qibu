<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.broker.dao.BrokerAccountMapper">
  <resultMap id="BaseResultMap" type="com.broker.domain.BrokerAccount">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="broker_user" jdbcType="INTEGER" property="brokerUser" />
    <result column="bank_no" jdbcType="VARCHAR" property="bankNo" />
    <result column="bank_name" jdbcType="VARCHAR" property="bankName" />
    <result column="bank_branch" jdbcType="VARCHAR" property="bankBranch" />
    <result column="account_balance" jdbcType="DECIMAL" property="accountBalance" />
    <result column="freeze_balance" jdbcType="DECIMAL" property="freezeBalance" />
  </resultMap>
  <sql id="Base_Column_List">
    uid, broker_user, bank_no, bank_name, bank_branch, account_balance, freeze_balance
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from broker_account
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from broker_account
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.broker.domain.BrokerAccount">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_account (uid, broker_user, bank_no, 
      bank_name, bank_branch, account_balance, 
      freeze_balance)
    values (#{uid,jdbcType=INTEGER}, #{brokerUser,jdbcType=INTEGER}, #{bankNo,jdbcType=VARCHAR}, 
      #{bankName,jdbcType=VARCHAR}, #{bankBranch,jdbcType=VARCHAR}, #{accountBalance,jdbcType=DECIMAL}, 
      #{freezeBalance,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.broker.domain.BrokerAccount">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_account
    <trim prefix="(" suffix=")" suffixOverrides=",">
      uid,
      <if test="brokerUser != null">
        broker_user,
      </if>
      <if test="bankNo != null">
        bank_no,
      </if>
      <if test="bankName != null">
        bank_name,
      </if>
      <if test="bankBranch != null">
        bank_branch,
      </if>
      <if test="accountBalance != null">
        account_balance,
      </if>
      <if test="freezeBalance != null">
        freeze_balance,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{uid,jdbcType=INTEGER},
      <if test="brokerUser != null">
        #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="bankNo != null">
        #{bankNo,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankBranch != null">
        #{bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="accountBalance != null">
        #{accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="freezeBalance != null">
        #{freezeBalance,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.broker.domain.BrokerAccount">
    update broker_account
    <set>
      <if test="brokerUser != null">
        broker_user = #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="bankNo != null">
        bank_no = #{bankNo,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        bank_name = #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankBranch != null">
        bank_branch = #{bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="accountBalance != null">
        account_balance = #{accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="freezeBalance != null">
        freeze_balance = #{freezeBalance,jdbcType=DECIMAL},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.broker.domain.BrokerAccount">
    update broker_account
    set broker_user = #{brokerUser,jdbcType=INTEGER},
      bank_no = #{bankNo,jdbcType=VARCHAR},
      bank_name = #{bankName,jdbcType=VARCHAR},
      bank_branch = #{bankBranch,jdbcType=VARCHAR},
      account_balance = #{accountBalance,jdbcType=DECIMAL},
      freeze_balance = #{freezeBalance,jdbcType=DECIMAL}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.broker.domain.BrokerAccount">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="broker_user" jdbcType="INTEGER" property="brokerUser" />
    <result column="bank_no" jdbcType="VARCHAR" property="bankNo" />
    <result column="bank_name" jdbcType="VARCHAR" property="bankName" />
    <result column="bank_branch" jdbcType="VARCHAR" property="bankBranch" />
    <result column="account_balance" jdbcType="DECIMAL" property="accountBalance" />
    <result column="freeze_balance" jdbcType="DECIMAL" property="freezeBalance" />
  </resultMap>
  <sql id="Base_Column_List">
    uid, broker_user, bank_no, bank_name, bank_branch, account_balance, freeze_balance
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from broker_account
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from broker_account
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.broker.domain.BrokerAccount">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_account (uid, broker_user, bank_no, 
      bank_name, bank_branch, account_balance, 
      freeze_balance)
    values (#{uid,jdbcType=INTEGER}, #{brokerUser,jdbcType=INTEGER}, #{bankNo,jdbcType=VARCHAR}, 
      #{bankName,jdbcType=VARCHAR}, #{bankBranch,jdbcType=VARCHAR}, #{accountBalance,jdbcType=DECIMAL}, 
      #{freezeBalance,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.broker.domain.BrokerAccount">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_account
    <trim prefix="(" suffix=")" suffixOverrides=",">
      uid,
      <if test="brokerUser != null">
        broker_user,
      </if>
      <if test="bankNo != null">
        bank_no,
      </if>
      <if test="bankName != null">
        bank_name,
      </if>
      <if test="bankBranch != null">
        bank_branch,
      </if>
      <if test="accountBalance != null">
        account_balance,
      </if>
      <if test="freezeBalance != null">
        freeze_balance,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{uid,jdbcType=INTEGER},
      <if test="brokerUser != null">
        #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="bankNo != null">
        #{bankNo,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankBranch != null">
        #{bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="accountBalance != null">
        #{accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="freezeBalance != null">
        #{freezeBalance,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.broker.domain.BrokerAccount">
    update broker_account
    <set>
      <if test="brokerUser != null">
        broker_user = #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="bankNo != null">
        bank_no = #{bankNo,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        bank_name = #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankBranch != null">
        bank_branch = #{bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="accountBalance != null">
        account_balance = #{accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="freezeBalance != null">
        freeze_balance = #{freezeBalance,jdbcType=DECIMAL},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.broker.domain.BrokerAccount">
    update broker_account
    set broker_user = #{brokerUser,jdbcType=INTEGER},
      bank_no = #{bankNo,jdbcType=VARCHAR},
      bank_name = #{bankName,jdbcType=VARCHAR},
      bank_branch = #{bankBranch,jdbcType=VARCHAR},
      account_balance = #{accountBalance,jdbcType=DECIMAL},
      freeze_balance = #{freezeBalance,jdbcType=DECIMAL}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.broker.domain.BrokerAccount">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="broker_user" jdbcType="INTEGER" property="brokerUser" />
    <result column="bank_no" jdbcType="VARCHAR" property="bankNo" />
    <result column="bank_name" jdbcType="VARCHAR" property="bankName" />
    <result column="bank_branch" jdbcType="VARCHAR" property="bankBranch" />
    <result column="account_balance" jdbcType="DECIMAL" property="accountBalance" />
    <result column="freeze_balance" jdbcType="DECIMAL" property="freezeBalance" />
  </resultMap>
  <sql id="Base_Column_List">
    uid, broker_user, bank_no, bank_name, bank_branch, account_balance, freeze_balance
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from broker_account
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from broker_account
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.broker.domain.BrokerAccount">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_account (uid, broker_user, bank_no, 
      bank_name, bank_branch, account_balance, 
      freeze_balance)
    values (#{uid,jdbcType=INTEGER}, #{brokerUser,jdbcType=INTEGER}, #{bankNo,jdbcType=VARCHAR}, 
      #{bankName,jdbcType=VARCHAR}, #{bankBranch,jdbcType=VARCHAR}, #{accountBalance,jdbcType=DECIMAL}, 
      #{freezeBalance,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.broker.domain.BrokerAccount">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_account
    <trim prefix="(" suffix=")" suffixOverrides=",">
      uid,
      <if test="brokerUser != null">
        broker_user,
      </if>
      <if test="bankNo != null">
        bank_no,
      </if>
      <if test="bankName != null">
        bank_name,
      </if>
      <if test="bankBranch != null">
        bank_branch,
      </if>
      <if test="accountBalance != null">
        account_balance,
      </if>
      <if test="freezeBalance != null">
        freeze_balance,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{uid,jdbcType=INTEGER},
      <if test="brokerUser != null">
        #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="bankNo != null">
        #{bankNo,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankBranch != null">
        #{bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="accountBalance != null">
        #{accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="freezeBalance != null">
        #{freezeBalance,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.broker.domain.BrokerAccount">
    update broker_account
    <set>
      <if test="brokerUser != null">
        broker_user = #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="bankNo != null">
        bank_no = #{bankNo,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        bank_name = #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankBranch != null">
        bank_branch = #{bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="accountBalance != null">
        account_balance = #{accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="freezeBalance != null">
        freeze_balance = #{freezeBalance,jdbcType=DECIMAL},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.broker.domain.BrokerAccount">
    update broker_account
    set broker_user = #{brokerUser,jdbcType=INTEGER},
      bank_no = #{bankNo,jdbcType=VARCHAR},
      bank_name = #{bankName,jdbcType=VARCHAR},
      bank_branch = #{bankBranch,jdbcType=VARCHAR},
      account_balance = #{accountBalance,jdbcType=DECIMAL},
      freeze_balance = #{freezeBalance,jdbcType=DECIMAL}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.broker.domain.BrokerAccount">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="broker_user" jdbcType="INTEGER" property="brokerUser" />
    <result column="bank_no" jdbcType="VARCHAR" property="bankNo" />
    <result column="bank_name" jdbcType="VARCHAR" property="bankName" />
    <result column="bank_branch" jdbcType="VARCHAR" property="bankBranch" />
    <result column="account_balance" jdbcType="DECIMAL" property="accountBalance" />
    <result column="freeze_balance" jdbcType="DECIMAL" property="freezeBalance" />
  </resultMap>
  <sql id="Base_Column_List">
    uid, broker_user, bank_no, bank_name, bank_branch, account_balance, freeze_balance
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from broker_account
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from broker_account
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.broker.domain.BrokerAccount">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_account (uid, broker_user, bank_no, 
      bank_name, bank_branch, account_balance, 
      freeze_balance)
    values (#{uid,jdbcType=INTEGER}, #{brokerUser,jdbcType=INTEGER}, #{bankNo,jdbcType=VARCHAR}, 
      #{bankName,jdbcType=VARCHAR}, #{bankBranch,jdbcType=VARCHAR}, #{accountBalance,jdbcType=DECIMAL}, 
      #{freezeBalance,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.broker.domain.BrokerAccount">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_account
    <trim prefix="(" suffix=")" suffixOverrides=",">
      uid,
      <if test="brokerUser != null">
        broker_user,
      </if>
      <if test="bankNo != null">
        bank_no,
      </if>
      <if test="bankName != null">
        bank_name,
      </if>
      <if test="bankBranch != null">
        bank_branch,
      </if>
      <if test="accountBalance != null">
        account_balance,
      </if>
      <if test="freezeBalance != null">
        freeze_balance,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{uid,jdbcType=INTEGER},
      <if test="brokerUser != null">
        #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="bankNo != null">
        #{bankNo,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankBranch != null">
        #{bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="accountBalance != null">
        #{accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="freezeBalance != null">
        #{freezeBalance,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.broker.domain.BrokerAccount">
    update broker_account
    <set>
      <if test="brokerUser != null">
        broker_user = #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="bankNo != null">
        bank_no = #{bankNo,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        bank_name = #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankBranch != null">
        bank_branch = #{bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="accountBalance != null">
        account_balance = #{accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="freezeBalance != null">
        freeze_balance = #{freezeBalance,jdbcType=DECIMAL},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.broker.domain.BrokerAccount">
    update broker_account
    set broker_user = #{brokerUser,jdbcType=INTEGER},
      bank_no = #{bankNo,jdbcType=VARCHAR},
      bank_name = #{bankName,jdbcType=VARCHAR},
      bank_branch = #{bankBranch,jdbcType=VARCHAR},
      account_balance = #{accountBalance,jdbcType=DECIMAL},
      freeze_balance = #{freezeBalance,jdbcType=DECIMAL}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.broker.domain.BrokerAccount">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="broker_user" jdbcType="INTEGER" property="brokerUser" />
    <result column="bank_no" jdbcType="VARCHAR" property="bankNo" />
    <result column="bank_name" jdbcType="VARCHAR" property="bankName" />
    <result column="bank_branch" jdbcType="VARCHAR" property="bankBranch" />
    <result column="account_balance" jdbcType="DECIMAL" property="accountBalance" />
    <result column="freeze_balance" jdbcType="DECIMAL" property="freezeBalance" />
  </resultMap>
  <sql id="Base_Column_List">
    uid, broker_user, bank_no, bank_name, bank_branch, account_balance, freeze_balance
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from broker_account
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from broker_account
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.broker.domain.BrokerAccount">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_account (uid, broker_user, bank_no, 
      bank_name, bank_branch, account_balance, 
      freeze_balance)
    values (#{uid,jdbcType=INTEGER}, #{brokerUser,jdbcType=INTEGER}, #{bankNo,jdbcType=VARCHAR}, 
      #{bankName,jdbcType=VARCHAR}, #{bankBranch,jdbcType=VARCHAR}, #{accountBalance,jdbcType=DECIMAL}, 
      #{freezeBalance,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.broker.domain.BrokerAccount">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_account
    <trim prefix="(" suffix=")" suffixOverrides=",">
      uid,
      <if test="brokerUser != null">
        broker_user,
      </if>
      <if test="bankNo != null">
        bank_no,
      </if>
      <if test="bankName != null">
        bank_name,
      </if>
      <if test="bankBranch != null">
        bank_branch,
      </if>
      <if test="accountBalance != null">
        account_balance,
      </if>
      <if test="freezeBalance != null">
        freeze_balance,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{uid,jdbcType=INTEGER},
      <if test="brokerUser != null">
        #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="bankNo != null">
        #{bankNo,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankBranch != null">
        #{bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="accountBalance != null">
        #{accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="freezeBalance != null">
        #{freezeBalance,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.broker.domain.BrokerAccount">
    update broker_account
    <set>
      <if test="brokerUser != null">
        broker_user = #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="bankNo != null">
        bank_no = #{bankNo,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        bank_name = #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankBranch != null">
        bank_branch = #{bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="accountBalance != null">
        account_balance = #{accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="freezeBalance != null">
        freeze_balance = #{freezeBalance,jdbcType=DECIMAL},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.broker.domain.BrokerAccount">
    update broker_account
    set broker_user = #{brokerUser,jdbcType=INTEGER},
      bank_no = #{bankNo,jdbcType=VARCHAR},
      bank_name = #{bankName,jdbcType=VARCHAR},
      bank_branch = #{bankBranch,jdbcType=VARCHAR},
      account_balance = #{accountBalance,jdbcType=DECIMAL},
      freeze_balance = #{freezeBalance,jdbcType=DECIMAL}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.broker.domain.BrokerAccount">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="broker_user" jdbcType="INTEGER" property="brokerUser" />
    <result column="bank_no" jdbcType="VARCHAR" property="bankNo" />
    <result column="bank_name" jdbcType="VARCHAR" property="bankName" />
    <result column="bank_branch" jdbcType="VARCHAR" property="bankBranch" />
    <result column="account_balance" jdbcType="DECIMAL" property="accountBalance" />
    <result column="freeze_balance" jdbcType="DECIMAL" property="freezeBalance" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    uid, broker_user, bank_no, bank_name, bank_branch, account_balance, freeze_balance
  </sql>
  <select id="selectByExample" parameterType="com.broker.domain.BrokerAccountExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from broker_account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from broker_account
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from broker_account
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.broker.domain.BrokerAccountExample">
    delete from broker_account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.broker.domain.BrokerAccount">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_account (uid, broker_user, bank_no, 
      bank_name, bank_branch, account_balance, 
      freeze_balance)
    values (#{uid,jdbcType=INTEGER}, #{brokerUser,jdbcType=INTEGER}, #{bankNo,jdbcType=VARCHAR}, 
      #{bankName,jdbcType=VARCHAR}, #{bankBranch,jdbcType=VARCHAR}, #{accountBalance,jdbcType=DECIMAL}, 
      #{freezeBalance,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.broker.domain.BrokerAccount">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_account
    <trim prefix="(" suffix=")" suffixOverrides=",">
      uid,
      <if test="brokerUser != null">
        broker_user,
      </if>
      <if test="bankNo != null">
        bank_no,
      </if>
      <if test="bankName != null">
        bank_name,
      </if>
      <if test="bankBranch != null">
        bank_branch,
      </if>
      <if test="accountBalance != null">
        account_balance,
      </if>
      <if test="freezeBalance != null">
        freeze_balance,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{uid,jdbcType=INTEGER},
      <if test="brokerUser != null">
        #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="bankNo != null">
        #{bankNo,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankBranch != null">
        #{bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="accountBalance != null">
        #{accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="freezeBalance != null">
        #{freezeBalance,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.broker.domain.BrokerAccountExample" resultType="java.lang.Integer">
    select count(*) from broker_account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update broker_account
    <set>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.brokerUser != null">
        broker_user = #{record.brokerUser,jdbcType=INTEGER},
      </if>
      <if test="record.bankNo != null">
        bank_no = #{record.bankNo,jdbcType=VARCHAR},
      </if>
      <if test="record.bankName != null">
        bank_name = #{record.bankName,jdbcType=VARCHAR},
      </if>
      <if test="record.bankBranch != null">
        bank_branch = #{record.bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="record.accountBalance != null">
        account_balance = #{record.accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="record.freezeBalance != null">
        freeze_balance = #{record.freezeBalance,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update broker_account
    set uid = #{record.uid,jdbcType=INTEGER},
      broker_user = #{record.brokerUser,jdbcType=INTEGER},
      bank_no = #{record.bankNo,jdbcType=VARCHAR},
      bank_name = #{record.bankName,jdbcType=VARCHAR},
      bank_branch = #{record.bankBranch,jdbcType=VARCHAR},
      account_balance = #{record.accountBalance,jdbcType=DECIMAL},
      freeze_balance = #{record.freezeBalance,jdbcType=DECIMAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.broker.domain.BrokerAccount">
    update broker_account
    <set>
      <if test="brokerUser != null">
        broker_user = #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="bankNo != null">
        bank_no = #{bankNo,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        bank_name = #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankBranch != null">
        bank_branch = #{bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="accountBalance != null">
        account_balance = #{accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="freezeBalance != null">
        freeze_balance = #{freezeBalance,jdbcType=DECIMAL},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.broker.domain.BrokerAccount">
    update broker_account
    set broker_user = #{brokerUser,jdbcType=INTEGER},
      bank_no = #{bankNo,jdbcType=VARCHAR},
      bank_name = #{bankName,jdbcType=VARCHAR},
      bank_branch = #{bankBranch,jdbcType=VARCHAR},
      account_balance = #{accountBalance,jdbcType=DECIMAL},
      freeze_balance = #{freezeBalance,jdbcType=DECIMAL}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.broker.domain.BrokerAccount">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="broker_user" jdbcType="INTEGER" property="brokerUser" />
    <result column="bank_no" jdbcType="VARCHAR" property="bankNo" />
    <result column="bank_name" jdbcType="VARCHAR" property="bankName" />
    <result column="bank_branch" jdbcType="VARCHAR" property="bankBranch" />
    <result column="account_balance" jdbcType="DECIMAL" property="accountBalance" />
    <result column="freeze_balance" jdbcType="DECIMAL" property="freezeBalance" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    uid, broker_user, bank_no, bank_name, bank_branch, account_balance, freeze_balance
  </sql>
  <select id="selectByExample" parameterType="com.broker.domain.BrokerAccountExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from broker_account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from broker_account
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from broker_account
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.broker.domain.BrokerAccountExample">
    delete from broker_account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.broker.domain.BrokerAccount">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_account (uid, broker_user, bank_no, 
      bank_name, bank_branch, account_balance, 
      freeze_balance)
    values (#{uid,jdbcType=INTEGER}, #{brokerUser,jdbcType=INTEGER}, #{bankNo,jdbcType=VARCHAR}, 
      #{bankName,jdbcType=VARCHAR}, #{bankBranch,jdbcType=VARCHAR}, #{accountBalance,jdbcType=DECIMAL}, 
      #{freezeBalance,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.broker.domain.BrokerAccount">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_account
    <trim prefix="(" suffix=")" suffixOverrides=",">
      uid,
      <if test="brokerUser != null">
        broker_user,
      </if>
      <if test="bankNo != null">
        bank_no,
      </if>
      <if test="bankName != null">
        bank_name,
      </if>
      <if test="bankBranch != null">
        bank_branch,
      </if>
      <if test="accountBalance != null">
        account_balance,
      </if>
      <if test="freezeBalance != null">
        freeze_balance,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{uid,jdbcType=INTEGER},
      <if test="brokerUser != null">
        #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="bankNo != null">
        #{bankNo,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankBranch != null">
        #{bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="accountBalance != null">
        #{accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="freezeBalance != null">
        #{freezeBalance,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.broker.domain.BrokerAccountExample" resultType="java.lang.Integer">
    select count(*) from broker_account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update broker_account
    <set>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.brokerUser != null">
        broker_user = #{record.brokerUser,jdbcType=INTEGER},
      </if>
      <if test="record.bankNo != null">
        bank_no = #{record.bankNo,jdbcType=VARCHAR},
      </if>
      <if test="record.bankName != null">
        bank_name = #{record.bankName,jdbcType=VARCHAR},
      </if>
      <if test="record.bankBranch != null">
        bank_branch = #{record.bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="record.accountBalance != null">
        account_balance = #{record.accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="record.freezeBalance != null">
        freeze_balance = #{record.freezeBalance,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update broker_account
    set uid = #{record.uid,jdbcType=INTEGER},
      broker_user = #{record.brokerUser,jdbcType=INTEGER},
      bank_no = #{record.bankNo,jdbcType=VARCHAR},
      bank_name = #{record.bankName,jdbcType=VARCHAR},
      bank_branch = #{record.bankBranch,jdbcType=VARCHAR},
      account_balance = #{record.accountBalance,jdbcType=DECIMAL},
      freeze_balance = #{record.freezeBalance,jdbcType=DECIMAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.broker.domain.BrokerAccount">
    update broker_account
    <set>
      <if test="brokerUser != null">
        broker_user = #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="bankNo != null">
        bank_no = #{bankNo,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        bank_name = #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankBranch != null">
        bank_branch = #{bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="accountBalance != null">
        account_balance = #{accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="freezeBalance != null">
        freeze_balance = #{freezeBalance,jdbcType=DECIMAL},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.broker.domain.BrokerAccount">
    update broker_account
    set broker_user = #{brokerUser,jdbcType=INTEGER},
      bank_no = #{bankNo,jdbcType=VARCHAR},
      bank_name = #{bankName,jdbcType=VARCHAR},
      bank_branch = #{bankBranch,jdbcType=VARCHAR},
      account_balance = #{accountBalance,jdbcType=DECIMAL},
      freeze_balance = #{freezeBalance,jdbcType=DECIMAL}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.broker.domain.BrokerAccount">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="broker_user" jdbcType="INTEGER" property="brokerUser" />
    <result column="bank_no" jdbcType="VARCHAR" property="bankNo" />
    <result column="bank_name" jdbcType="VARCHAR" property="bankName" />
    <result column="bank_branch" jdbcType="VARCHAR" property="bankBranch" />
    <result column="account_balance" jdbcType="DECIMAL" property="accountBalance" />
    <result column="freeze_balance" jdbcType="DECIMAL" property="freezeBalance" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    uid, broker_user, bank_no, bank_name, bank_branch, account_balance, freeze_balance
  </sql>
  <select id="selectByExample" parameterType="com.broker.domain.BrokerAccountExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from broker_account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from broker_account
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from broker_account
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.broker.domain.BrokerAccountExample">
    delete from broker_account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.broker.domain.BrokerAccount">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_account (uid, broker_user, bank_no, 
      bank_name, bank_branch, account_balance, 
      freeze_balance)
    values (#{uid,jdbcType=INTEGER}, #{brokerUser,jdbcType=INTEGER}, #{bankNo,jdbcType=VARCHAR}, 
      #{bankName,jdbcType=VARCHAR}, #{bankBranch,jdbcType=VARCHAR}, #{accountBalance,jdbcType=DECIMAL}, 
      #{freezeBalance,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.broker.domain.BrokerAccount">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_account
    <trim prefix="(" suffix=")" suffixOverrides=",">
      uid,
      <if test="brokerUser != null">
        broker_user,
      </if>
      <if test="bankNo != null">
        bank_no,
      </if>
      <if test="bankName != null">
        bank_name,
      </if>
      <if test="bankBranch != null">
        bank_branch,
      </if>
      <if test="accountBalance != null">
        account_balance,
      </if>
      <if test="freezeBalance != null">
        freeze_balance,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{uid,jdbcType=INTEGER},
      <if test="brokerUser != null">
        #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="bankNo != null">
        #{bankNo,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankBranch != null">
        #{bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="accountBalance != null">
        #{accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="freezeBalance != null">
        #{freezeBalance,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.broker.domain.BrokerAccountExample" resultType="java.lang.Integer">
    select count(*) from broker_account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update broker_account
    <set>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.brokerUser != null">
        broker_user = #{record.brokerUser,jdbcType=INTEGER},
      </if>
      <if test="record.bankNo != null">
        bank_no = #{record.bankNo,jdbcType=VARCHAR},
      </if>
      <if test="record.bankName != null">
        bank_name = #{record.bankName,jdbcType=VARCHAR},
      </if>
      <if test="record.bankBranch != null">
        bank_branch = #{record.bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="record.accountBalance != null">
        account_balance = #{record.accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="record.freezeBalance != null">
        freeze_balance = #{record.freezeBalance,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update broker_account
    set uid = #{record.uid,jdbcType=INTEGER},
      broker_user = #{record.brokerUser,jdbcType=INTEGER},
      bank_no = #{record.bankNo,jdbcType=VARCHAR},
      bank_name = #{record.bankName,jdbcType=VARCHAR},
      bank_branch = #{record.bankBranch,jdbcType=VARCHAR},
      account_balance = #{record.accountBalance,jdbcType=DECIMAL},
      freeze_balance = #{record.freezeBalance,jdbcType=DECIMAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.broker.domain.BrokerAccount">
    update broker_account
    <set>
      <if test="brokerUser != null">
        broker_user = #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="bankNo != null">
        bank_no = #{bankNo,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        bank_name = #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankBranch != null">
        bank_branch = #{bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="accountBalance != null">
        account_balance = #{accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="freezeBalance != null">
        freeze_balance = #{freezeBalance,jdbcType=DECIMAL},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.broker.domain.BrokerAccount">
    update broker_account
    set broker_user = #{brokerUser,jdbcType=INTEGER},
      bank_no = #{bankNo,jdbcType=VARCHAR},
      bank_name = #{bankName,jdbcType=VARCHAR},
      bank_branch = #{bankBranch,jdbcType=VARCHAR},
      account_balance = #{accountBalance,jdbcType=DECIMAL},
      freeze_balance = #{freezeBalance,jdbcType=DECIMAL}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.broker.domain.BrokerAccount">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="broker_user" jdbcType="INTEGER" property="brokerUser" />
    <result column="bank_no" jdbcType="VARCHAR" property="bankNo" />
    <result column="bank_name" jdbcType="VARCHAR" property="bankName" />
    <result column="bank_branch" jdbcType="VARCHAR" property="bankBranch" />
    <result column="account_balance" jdbcType="DECIMAL" property="accountBalance" />
    <result column="freeze_balance" jdbcType="DECIMAL" property="freezeBalance" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    uid, broker_user, bank_no, bank_name, bank_branch, account_balance, freeze_balance
  </sql>
  <select id="selectByExample" parameterType="com.broker.domain.BrokerAccountExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from broker_account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from broker_account
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from broker_account
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.broker.domain.BrokerAccountExample">
    delete from broker_account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.broker.domain.BrokerAccount">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_account (uid, broker_user, bank_no, 
      bank_name, bank_branch, account_balance, 
      freeze_balance)
    values (#{uid,jdbcType=INTEGER}, #{brokerUser,jdbcType=INTEGER}, #{bankNo,jdbcType=VARCHAR}, 
      #{bankName,jdbcType=VARCHAR}, #{bankBranch,jdbcType=VARCHAR}, #{accountBalance,jdbcType=DECIMAL}, 
      #{freezeBalance,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.broker.domain.BrokerAccount">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_account
    <trim prefix="(" suffix=")" suffixOverrides=",">
      uid,
      <if test="brokerUser != null">
        broker_user,
      </if>
      <if test="bankNo != null">
        bank_no,
      </if>
      <if test="bankName != null">
        bank_name,
      </if>
      <if test="bankBranch != null">
        bank_branch,
      </if>
      <if test="accountBalance != null">
        account_balance,
      </if>
      <if test="freezeBalance != null">
        freeze_balance,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{uid,jdbcType=INTEGER},
      <if test="brokerUser != null">
        #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="bankNo != null">
        #{bankNo,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankBranch != null">
        #{bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="accountBalance != null">
        #{accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="freezeBalance != null">
        #{freezeBalance,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.broker.domain.BrokerAccountExample" resultType="java.lang.Integer">
    select count(*) from broker_account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update broker_account
    <set>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.brokerUser != null">
        broker_user = #{record.brokerUser,jdbcType=INTEGER},
      </if>
      <if test="record.bankNo != null">
        bank_no = #{record.bankNo,jdbcType=VARCHAR},
      </if>
      <if test="record.bankName != null">
        bank_name = #{record.bankName,jdbcType=VARCHAR},
      </if>
      <if test="record.bankBranch != null">
        bank_branch = #{record.bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="record.accountBalance != null">
        account_balance = #{record.accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="record.freezeBalance != null">
        freeze_balance = #{record.freezeBalance,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update broker_account
    set uid = #{record.uid,jdbcType=INTEGER},
      broker_user = #{record.brokerUser,jdbcType=INTEGER},
      bank_no = #{record.bankNo,jdbcType=VARCHAR},
      bank_name = #{record.bankName,jdbcType=VARCHAR},
      bank_branch = #{record.bankBranch,jdbcType=VARCHAR},
      account_balance = #{record.accountBalance,jdbcType=DECIMAL},
      freeze_balance = #{record.freezeBalance,jdbcType=DECIMAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.broker.domain.BrokerAccount">
    update broker_account
    <set>
      <if test="brokerUser != null">
        broker_user = #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="bankNo != null">
        bank_no = #{bankNo,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        bank_name = #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankBranch != null">
        bank_branch = #{bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="accountBalance != null">
        account_balance = #{accountBalance,jdbcType=DECIMAL},
      </if>
      <if test="freezeBalance != null">
        freeze_balance = #{freezeBalance,jdbcType=DECIMAL},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.broker.domain.BrokerAccount">
    update broker_account
    set broker_user = #{brokerUser,jdbcType=INTEGER},
      bank_no = #{bankNo,jdbcType=VARCHAR},
      bank_name = #{bankName,jdbcType=VARCHAR},
      bank_branch = #{bankBranch,jdbcType=VARCHAR},
      account_balance = #{accountBalance,jdbcType=DECIMAL},
      freeze_balance = #{freezeBalance,jdbcType=DECIMAL}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
</mapper>