<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.broker.dao.BrokerEarningsMapper">
  <resultMap id="BaseResultMap" type="com.broker.domain.BrokerEarnings">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="broker_user" jdbcType="INTEGER" property="brokerUser" />
    <result column="earnings_amount" jdbcType="DECIMAL" property="earningsAmount" />
    <result column="earnings_source" jdbcType="VARCHAR" property="earningsSource" />
    <result column="status" jdbcType="TINYINT" property="status" />
  </resultMap>
  <sql id="Base_Column_List">
    uid, broker_user, earnings_amount, earnings_source, status
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from broker_earnings
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from broker_earnings
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.broker.domain.BrokerEarnings">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_earnings (uid, broker_user, earnings_amount, 
      earnings_source, status)
    values (#{uid,jdbcType=INTEGER}, #{brokerUser,jdbcType=INTEGER}, #{earningsAmount,jdbcType=DECIMAL}, 
      #{earningsSource,jdbcType=VARCHAR}, #{status,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="com.broker.domain.BrokerEarnings">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_earnings
    <trim prefix="(" suffix=")" suffixOverrides=",">
      uid,
      <if test="brokerUser != null">
        broker_user,
      </if>
      <if test="earningsAmount != null">
        earnings_amount,
      </if>
      <if test="earningsSource != null">
        earnings_source,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{uid,jdbcType=INTEGER},
      <if test="brokerUser != null">
        #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="earningsAmount != null">
        #{earningsAmount,jdbcType=DECIMAL},
      </if>
      <if test="earningsSource != null">
        #{earningsSource,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.broker.domain.BrokerEarnings">
    update broker_earnings
    <set>
      <if test="brokerUser != null">
        broker_user = #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="earningsAmount != null">
        earnings_amount = #{earningsAmount,jdbcType=DECIMAL},
      </if>
      <if test="earningsSource != null">
        earnings_source = #{earningsSource,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.broker.domain.BrokerEarnings">
    update broker_earnings
    set broker_user = #{brokerUser,jdbcType=INTEGER},
      earnings_amount = #{earningsAmount,jdbcType=DECIMAL},
      earnings_source = #{earningsSource,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.broker.domain.BrokerEarnings">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="broker_user" jdbcType="INTEGER" property="brokerUser" />
    <result column="earnings_amount" jdbcType="DECIMAL" property="earningsAmount" />
    <result column="earnings_source" jdbcType="VARCHAR" property="earningsSource" />
    <result column="status" jdbcType="TINYINT" property="status" />
  </resultMap>
  <sql id="Base_Column_List">
    uid, broker_user, earnings_amount, earnings_source, status
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from broker_earnings
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from broker_earnings
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.broker.domain.BrokerEarnings">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_earnings (uid, broker_user, earnings_amount, 
      earnings_source, status)
    values (#{uid,jdbcType=INTEGER}, #{brokerUser,jdbcType=INTEGER}, #{earningsAmount,jdbcType=DECIMAL}, 
      #{earningsSource,jdbcType=VARCHAR}, #{status,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="com.broker.domain.BrokerEarnings">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_earnings
    <trim prefix="(" suffix=")" suffixOverrides=",">
      uid,
      <if test="brokerUser != null">
        broker_user,
      </if>
      <if test="earningsAmount != null">
        earnings_amount,
      </if>
      <if test="earningsSource != null">
        earnings_source,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{uid,jdbcType=INTEGER},
      <if test="brokerUser != null">
        #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="earningsAmount != null">
        #{earningsAmount,jdbcType=DECIMAL},
      </if>
      <if test="earningsSource != null">
        #{earningsSource,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.broker.domain.BrokerEarnings">
    update broker_earnings
    <set>
      <if test="brokerUser != null">
        broker_user = #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="earningsAmount != null">
        earnings_amount = #{earningsAmount,jdbcType=DECIMAL},
      </if>
      <if test="earningsSource != null">
        earnings_source = #{earningsSource,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.broker.domain.BrokerEarnings">
    update broker_earnings
    set broker_user = #{brokerUser,jdbcType=INTEGER},
      earnings_amount = #{earningsAmount,jdbcType=DECIMAL},
      earnings_source = #{earningsSource,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.broker.domain.BrokerEarnings">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="broker_user" jdbcType="INTEGER" property="brokerUser" />
    <result column="earnings_amount" jdbcType="DECIMAL" property="earningsAmount" />
    <result column="earnings_source" jdbcType="VARCHAR" property="earningsSource" />
    <result column="status" jdbcType="TINYINT" property="status" />
  </resultMap>
  <sql id="Base_Column_List">
    uid, broker_user, earnings_amount, earnings_source, status
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from broker_earnings
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from broker_earnings
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.broker.domain.BrokerEarnings">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_earnings (uid, broker_user, earnings_amount, 
      earnings_source, status)
    values (#{uid,jdbcType=INTEGER}, #{brokerUser,jdbcType=INTEGER}, #{earningsAmount,jdbcType=DECIMAL}, 
      #{earningsSource,jdbcType=VARCHAR}, #{status,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="com.broker.domain.BrokerEarnings">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_earnings
    <trim prefix="(" suffix=")" suffixOverrides=",">
      uid,
      <if test="brokerUser != null">
        broker_user,
      </if>
      <if test="earningsAmount != null">
        earnings_amount,
      </if>
      <if test="earningsSource != null">
        earnings_source,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{uid,jdbcType=INTEGER},
      <if test="brokerUser != null">
        #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="earningsAmount != null">
        #{earningsAmount,jdbcType=DECIMAL},
      </if>
      <if test="earningsSource != null">
        #{earningsSource,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.broker.domain.BrokerEarnings">
    update broker_earnings
    <set>
      <if test="brokerUser != null">
        broker_user = #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="earningsAmount != null">
        earnings_amount = #{earningsAmount,jdbcType=DECIMAL},
      </if>
      <if test="earningsSource != null">
        earnings_source = #{earningsSource,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.broker.domain.BrokerEarnings">
    update broker_earnings
    set broker_user = #{brokerUser,jdbcType=INTEGER},
      earnings_amount = #{earningsAmount,jdbcType=DECIMAL},
      earnings_source = #{earningsSource,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.broker.domain.BrokerEarnings">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="broker_user" jdbcType="INTEGER" property="brokerUser" />
    <result column="earnings_amount" jdbcType="DECIMAL" property="earningsAmount" />
    <result column="earnings_source" jdbcType="VARCHAR" property="earningsSource" />
    <result column="status" jdbcType="TINYINT" property="status" />
  </resultMap>
  <sql id="Base_Column_List">
    uid, broker_user, earnings_amount, earnings_source, status
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from broker_earnings
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from broker_earnings
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.broker.domain.BrokerEarnings">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_earnings (uid, broker_user, earnings_amount, 
      earnings_source, status)
    values (#{uid,jdbcType=INTEGER}, #{brokerUser,jdbcType=INTEGER}, #{earningsAmount,jdbcType=DECIMAL}, 
      #{earningsSource,jdbcType=VARCHAR}, #{status,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="com.broker.domain.BrokerEarnings">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_earnings
    <trim prefix="(" suffix=")" suffixOverrides=",">
      uid,
      <if test="brokerUser != null">
        broker_user,
      </if>
      <if test="earningsAmount != null">
        earnings_amount,
      </if>
      <if test="earningsSource != null">
        earnings_source,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{uid,jdbcType=INTEGER},
      <if test="brokerUser != null">
        #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="earningsAmount != null">
        #{earningsAmount,jdbcType=DECIMAL},
      </if>
      <if test="earningsSource != null">
        #{earningsSource,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.broker.domain.BrokerEarnings">
    update broker_earnings
    <set>
      <if test="brokerUser != null">
        broker_user = #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="earningsAmount != null">
        earnings_amount = #{earningsAmount,jdbcType=DECIMAL},
      </if>
      <if test="earningsSource != null">
        earnings_source = #{earningsSource,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.broker.domain.BrokerEarnings">
    update broker_earnings
    set broker_user = #{brokerUser,jdbcType=INTEGER},
      earnings_amount = #{earningsAmount,jdbcType=DECIMAL},
      earnings_source = #{earningsSource,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.broker.domain.BrokerEarnings">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="broker_user" jdbcType="INTEGER" property="brokerUser" />
    <result column="earnings_amount" jdbcType="DECIMAL" property="earningsAmount" />
    <result column="earnings_source" jdbcType="VARCHAR" property="earningsSource" />
    <result column="status" jdbcType="BIT" property="status" />
  </resultMap>
  <sql id="Base_Column_List">
    uid, broker_user, earnings_amount, earnings_source, status
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from broker_earnings
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from broker_earnings
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.broker.domain.BrokerEarnings">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_earnings (uid, broker_user, earnings_amount, 
      earnings_source, status)
    values (#{uid,jdbcType=INTEGER}, #{brokerUser,jdbcType=INTEGER}, #{earningsAmount,jdbcType=DECIMAL}, 
      #{earningsSource,jdbcType=VARCHAR}, #{status,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="com.broker.domain.BrokerEarnings">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_earnings
    <trim prefix="(" suffix=")" suffixOverrides=",">
      uid,
      <if test="brokerUser != null">
        broker_user,
      </if>
      <if test="earningsAmount != null">
        earnings_amount,
      </if>
      <if test="earningsSource != null">
        earnings_source,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{uid,jdbcType=INTEGER},
      <if test="brokerUser != null">
        #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="earningsAmount != null">
        #{earningsAmount,jdbcType=DECIMAL},
      </if>
      <if test="earningsSource != null">
        #{earningsSource,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.broker.domain.BrokerEarnings">
    update broker_earnings
    <set>
      <if test="brokerUser != null">
        broker_user = #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="earningsAmount != null">
        earnings_amount = #{earningsAmount,jdbcType=DECIMAL},
      </if>
      <if test="earningsSource != null">
        earnings_source = #{earningsSource,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=BIT},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.broker.domain.BrokerEarnings">
    update broker_earnings
    set broker_user = #{brokerUser,jdbcType=INTEGER},
      earnings_amount = #{earningsAmount,jdbcType=DECIMAL},
      earnings_source = #{earningsSource,jdbcType=VARCHAR},
      status = #{status,jdbcType=BIT}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.broker.domain.BrokerEarnings">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="broker_user" jdbcType="INTEGER" property="brokerUser" />
    <result column="earnings_amount" jdbcType="DECIMAL" property="earningsAmount" />
    <result column="earnings_source" jdbcType="VARCHAR" property="earningsSource" />
    <result column="status" jdbcType="BIT" property="status" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    uid, broker_user, earnings_amount, earnings_source, status
  </sql>
  <select id="selectByExample" parameterType="com.broker.domain.BrokerEarningsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from broker_earnings
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from broker_earnings
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from broker_earnings
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.broker.domain.BrokerEarningsExample">
    delete from broker_earnings
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.broker.domain.BrokerEarnings">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_earnings (uid, broker_user, earnings_amount, 
      earnings_source, status)
    values (#{uid,jdbcType=INTEGER}, #{brokerUser,jdbcType=INTEGER}, #{earningsAmount,jdbcType=DECIMAL}, 
      #{earningsSource,jdbcType=VARCHAR}, #{status,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="com.broker.domain.BrokerEarnings">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_earnings
    <trim prefix="(" suffix=")" suffixOverrides=",">
      uid,
      <if test="brokerUser != null">
        broker_user,
      </if>
      <if test="earningsAmount != null">
        earnings_amount,
      </if>
      <if test="earningsSource != null">
        earnings_source,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{uid,jdbcType=INTEGER},
      <if test="brokerUser != null">
        #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="earningsAmount != null">
        #{earningsAmount,jdbcType=DECIMAL},
      </if>
      <if test="earningsSource != null">
        #{earningsSource,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.broker.domain.BrokerEarningsExample" resultType="java.lang.Integer">
    select count(*) from broker_earnings
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update broker_earnings
    <set>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.brokerUser != null">
        broker_user = #{record.brokerUser,jdbcType=INTEGER},
      </if>
      <if test="record.earningsAmount != null">
        earnings_amount = #{record.earningsAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.earningsSource != null">
        earnings_source = #{record.earningsSource,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update broker_earnings
    set uid = #{record.uid,jdbcType=INTEGER},
      broker_user = #{record.brokerUser,jdbcType=INTEGER},
      earnings_amount = #{record.earningsAmount,jdbcType=DECIMAL},
      earnings_source = #{record.earningsSource,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.broker.domain.BrokerEarnings">
    update broker_earnings
    <set>
      <if test="brokerUser != null">
        broker_user = #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="earningsAmount != null">
        earnings_amount = #{earningsAmount,jdbcType=DECIMAL},
      </if>
      <if test="earningsSource != null">
        earnings_source = #{earningsSource,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=BIT},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.broker.domain.BrokerEarnings">
    update broker_earnings
    set broker_user = #{brokerUser,jdbcType=INTEGER},
      earnings_amount = #{earningsAmount,jdbcType=DECIMAL},
      earnings_source = #{earningsSource,jdbcType=VARCHAR},
      status = #{status,jdbcType=BIT}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.broker.domain.BrokerEarnings">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="broker_user" jdbcType="INTEGER" property="brokerUser" />
    <result column="earnings_amount" jdbcType="DECIMAL" property="earningsAmount" />
    <result column="earnings_source" jdbcType="VARCHAR" property="earningsSource" />
    <result column="status" jdbcType="BIT" property="status" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    uid, broker_user, earnings_amount, earnings_source, status
  </sql>
  <select id="selectByExample" parameterType="com.broker.domain.BrokerEarningsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from broker_earnings
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from broker_earnings
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from broker_earnings
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.broker.domain.BrokerEarningsExample">
    delete from broker_earnings
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.broker.domain.BrokerEarnings">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_earnings (uid, broker_user, earnings_amount, 
      earnings_source, status)
    values (#{uid,jdbcType=INTEGER}, #{brokerUser,jdbcType=INTEGER}, #{earningsAmount,jdbcType=DECIMAL}, 
      #{earningsSource,jdbcType=VARCHAR}, #{status,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="com.broker.domain.BrokerEarnings">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_earnings
    <trim prefix="(" suffix=")" suffixOverrides=",">
      uid,
      <if test="brokerUser != null">
        broker_user,
      </if>
      <if test="earningsAmount != null">
        earnings_amount,
      </if>
      <if test="earningsSource != null">
        earnings_source,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{uid,jdbcType=INTEGER},
      <if test="brokerUser != null">
        #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="earningsAmount != null">
        #{earningsAmount,jdbcType=DECIMAL},
      </if>
      <if test="earningsSource != null">
        #{earningsSource,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.broker.domain.BrokerEarningsExample" resultType="java.lang.Integer">
    select count(*) from broker_earnings
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update broker_earnings
    <set>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.brokerUser != null">
        broker_user = #{record.brokerUser,jdbcType=INTEGER},
      </if>
      <if test="record.earningsAmount != null">
        earnings_amount = #{record.earningsAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.earningsSource != null">
        earnings_source = #{record.earningsSource,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update broker_earnings
    set uid = #{record.uid,jdbcType=INTEGER},
      broker_user = #{record.brokerUser,jdbcType=INTEGER},
      earnings_amount = #{record.earningsAmount,jdbcType=DECIMAL},
      earnings_source = #{record.earningsSource,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.broker.domain.BrokerEarnings">
    update broker_earnings
    <set>
      <if test="brokerUser != null">
        broker_user = #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="earningsAmount != null">
        earnings_amount = #{earningsAmount,jdbcType=DECIMAL},
      </if>
      <if test="earningsSource != null">
        earnings_source = #{earningsSource,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=BIT},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.broker.domain.BrokerEarnings">
    update broker_earnings
    set broker_user = #{brokerUser,jdbcType=INTEGER},
      earnings_amount = #{earningsAmount,jdbcType=DECIMAL},
      earnings_source = #{earningsSource,jdbcType=VARCHAR},
      status = #{status,jdbcType=BIT}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.broker.domain.BrokerEarnings">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="broker_user" jdbcType="INTEGER" property="brokerUser" />
    <result column="earnings_amount" jdbcType="DECIMAL" property="earningsAmount" />
    <result column="earnings_source" jdbcType="VARCHAR" property="earningsSource" />
    <result column="status" jdbcType="BIT" property="status" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    uid, broker_user, earnings_amount, earnings_source, status
  </sql>
  <select id="selectByExample" parameterType="com.broker.domain.BrokerEarningsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from broker_earnings
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from broker_earnings
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from broker_earnings
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.broker.domain.BrokerEarningsExample">
    delete from broker_earnings
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.broker.domain.BrokerEarnings">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_earnings (uid, broker_user, earnings_amount, 
      earnings_source, status)
    values (#{uid,jdbcType=INTEGER}, #{brokerUser,jdbcType=INTEGER}, #{earningsAmount,jdbcType=DECIMAL}, 
      #{earningsSource,jdbcType=VARCHAR}, #{status,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="com.broker.domain.BrokerEarnings">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_earnings
    <trim prefix="(" suffix=")" suffixOverrides=",">
      uid,
      <if test="brokerUser != null">
        broker_user,
      </if>
      <if test="earningsAmount != null">
        earnings_amount,
      </if>
      <if test="earningsSource != null">
        earnings_source,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{uid,jdbcType=INTEGER},
      <if test="brokerUser != null">
        #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="earningsAmount != null">
        #{earningsAmount,jdbcType=DECIMAL},
      </if>
      <if test="earningsSource != null">
        #{earningsSource,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.broker.domain.BrokerEarningsExample" resultType="java.lang.Integer">
    select count(*) from broker_earnings
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update broker_earnings
    <set>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.brokerUser != null">
        broker_user = #{record.brokerUser,jdbcType=INTEGER},
      </if>
      <if test="record.earningsAmount != null">
        earnings_amount = #{record.earningsAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.earningsSource != null">
        earnings_source = #{record.earningsSource,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update broker_earnings
    set uid = #{record.uid,jdbcType=INTEGER},
      broker_user = #{record.brokerUser,jdbcType=INTEGER},
      earnings_amount = #{record.earningsAmount,jdbcType=DECIMAL},
      earnings_source = #{record.earningsSource,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.broker.domain.BrokerEarnings">
    update broker_earnings
    <set>
      <if test="brokerUser != null">
        broker_user = #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="earningsAmount != null">
        earnings_amount = #{earningsAmount,jdbcType=DECIMAL},
      </if>
      <if test="earningsSource != null">
        earnings_source = #{earningsSource,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=BIT},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.broker.domain.BrokerEarnings">
    update broker_earnings
    set broker_user = #{brokerUser,jdbcType=INTEGER},
      earnings_amount = #{earningsAmount,jdbcType=DECIMAL},
      earnings_source = #{earningsSource,jdbcType=VARCHAR},
      status = #{status,jdbcType=BIT}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.broker.domain.BrokerEarnings">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="broker_user" jdbcType="INTEGER" property="brokerUser" />
    <result column="earnings_amount" jdbcType="DECIMAL" property="earningsAmount" />
    <result column="earnings_source" jdbcType="VARCHAR" property="earningsSource" />
    <result column="status" jdbcType="BIT" property="status" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    uid, broker_user, earnings_amount, earnings_source, status
  </sql>
  <select id="selectByExample" parameterType="com.broker.domain.BrokerEarningsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from broker_earnings
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from broker_earnings
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from broker_earnings
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.broker.domain.BrokerEarningsExample">
    delete from broker_earnings
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.broker.domain.BrokerEarnings">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_earnings (uid, broker_user, earnings_amount, 
      earnings_source, status)
    values (#{uid,jdbcType=INTEGER}, #{brokerUser,jdbcType=INTEGER}, #{earningsAmount,jdbcType=DECIMAL}, 
      #{earningsSource,jdbcType=VARCHAR}, #{status,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="com.broker.domain.BrokerEarnings">
    <selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into broker_earnings
    <trim prefix="(" suffix=")" suffixOverrides=",">
      uid,
      <if test="brokerUser != null">
        broker_user,
      </if>
      <if test="earningsAmount != null">
        earnings_amount,
      </if>
      <if test="earningsSource != null">
        earnings_source,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{uid,jdbcType=INTEGER},
      <if test="brokerUser != null">
        #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="earningsAmount != null">
        #{earningsAmount,jdbcType=DECIMAL},
      </if>
      <if test="earningsSource != null">
        #{earningsSource,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.broker.domain.BrokerEarningsExample" resultType="java.lang.Integer">
    select count(*) from broker_earnings
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update broker_earnings
    <set>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.brokerUser != null">
        broker_user = #{record.brokerUser,jdbcType=INTEGER},
      </if>
      <if test="record.earningsAmount != null">
        earnings_amount = #{record.earningsAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.earningsSource != null">
        earnings_source = #{record.earningsSource,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update broker_earnings
    set uid = #{record.uid,jdbcType=INTEGER},
      broker_user = #{record.brokerUser,jdbcType=INTEGER},
      earnings_amount = #{record.earningsAmount,jdbcType=DECIMAL},
      earnings_source = #{record.earningsSource,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.broker.domain.BrokerEarnings">
    update broker_earnings
    <set>
      <if test="brokerUser != null">
        broker_user = #{brokerUser,jdbcType=INTEGER},
      </if>
      <if test="earningsAmount != null">
        earnings_amount = #{earningsAmount,jdbcType=DECIMAL},
      </if>
      <if test="earningsSource != null">
        earnings_source = #{earningsSource,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=BIT},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.broker.domain.BrokerEarnings">
    update broker_earnings
    set broker_user = #{brokerUser,jdbcType=INTEGER},
      earnings_amount = #{earningsAmount,jdbcType=DECIMAL},
      earnings_source = #{earningsSource,jdbcType=VARCHAR},
      status = #{status,jdbcType=BIT}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
</mapper>